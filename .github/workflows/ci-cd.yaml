# Copyright 2025 Jiaqi Liu. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
---
name: CI/CD

"on":
  pull_request:
  push:
    branches:
      - master

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.10"
  NEO4J_ENTERPRISE_VERSION: 5.24-enterprise
  NEO4J_URI: neo4j://localhost:7687
  NEO4J_DATABASE: neo4j
  NEO4J_USERNAME: not used
  NEO4J_PASSWORD: not used

jobs:
  pre-commit:
    name: Pre-commit Checks
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false
      - uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - uses: pre-commit/action@2c7b3805fd2a0fd8c1884dcaebf91fc102a13ecd #v3.0.1

  code-style:
    name: Python Code Style Check
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false
      - name: Set up Python 3.10
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install dependencies
        run: pip3 install -r requirements.txt
      - name: Check import orders
        run: isort --check .
      - name: pep8
        run: pycodestyle .

  unit-tests:
    name: Unit Tests
    needs: [code-style, pre-commit]
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
        subproject: [ graph-json-generator ]
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: ${{ matrix.subproject }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install dependencies
        run: pip3 install -r requirements.txt
      - name: Run tests
        run: python -m unittest

  graph-database-loading-tests:
    name: Test Graph Database Loading
    needs: unit-tests
    strategy:
      fail-fast: false
      matrix:
        language: [
          {
            name: German,
            load-script: wilhelm_vocabulary/load_german.py
          },
          {
            name: Ancient Greek,
            load-script: wilhelm_vocabulary/load_ancient_greek.py
          },
          {
            name: Latin,
            load-script: wilhelm_vocabulary/load_latin.py
          },
          {
            name: all languages (race condition test ①),
            load-script: wilhelm_vocabulary/load_all_in_parallel.py
          },
          {
            name: all languages (race condition test ②),
            load-script: wilhelm_vocabulary/load_all_in_parallel.py
          },
          {
            name: all languages (race condition test ③),
            load-script: wilhelm_vocabulary/load_all_in_parallel.py
          },
          {
            name: all languages (race condition test ④),
            load-script: wilhelm_vocabulary/load_all_in_parallel.py
          },
          {
            name: all languages (race condition test ⑤),
            load-script: wilhelm_vocabulary/load_all_in_parallel.py
          },
          {
            name: all languages (race condition test ⑥),
            load-script: wilhelm_vocabulary/load_all_in_parallel.py
          },
          {
            name: all languages (race condition test ⑦),
            load-script: wilhelm_vocabulary/load_all_in_parallel.py
          },
          {
            name: all languages (race condition test ⑧),
            load-script: wilhelm_vocabulary/load_all_in_parallel.py
          },
          {
            name: all languages (race condition test ⑨),
            load-script: wilhelm_vocabulary/load_all_in_parallel.py
          },
          {
            name: all languages (race condition test ⑩),
            load-script: wilhelm_vocabulary/load_all_in_parallel.py
          }
        ]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: graph-database-loader
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
          persist-credentials: false
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Startup a Neo4J database
        run: |
          docker run \
              --publish=7474:7474 \
              --publish=7687:7687 \
              --env=NEO4J_AUTH=none \
              --env=NEO4J_ACCEPT_LICENSE_AGREEMENT=yes neo4j:${{ env.NEO4J_ENTERPRISE_VERSION }} &
      - name: Wait for database to be ready
        uses: iFaxity/wait-on-action@a7d13170ec542bdca4ef8ac4b15e9c6aa00a6866 # v1.2.1
        with:
          resource: http://localhost:7474
      - name: Test loading ${{ matrix.language.name }}
        run: |
          pip3 install -r requirements.txt
          pip3 install -e .
          python3 ${{ matrix.language.load-script }}
        env:
          NEO4J_URI: ${{ env.NEO4J_URI }}
          NEO4J_DATABASE: ${{ env.NEO4J_DATABASE }}
          NEO4J_USERNAME: ${{ env.NEO4J_USERNAME }}
          NEO4J_PASSWORD: ${{ env.NEO4J_PASSWORD }}

  acceptance-tests:
    name: Running Acceptance Tests
    needs: graph-database-loading-tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: acceptance-tests
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
          persist-credentials: false
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Startup a Neo4J database
        run: |
          docker run \
              --publish=7474:7474 \
              --publish=7687:7687 \
              --env=NEO4J_AUTH=none \
              --env=NEO4J_ACCEPT_LICENSE_AGREEMENT=yes \
              -e NEO4JLABS_PLUGINS=\[\"apoc\"\] \
              --name data-loader \
              neo4j:${{ env.NEO4J_ENTERPRISE_VERSION }} &
      - name: Wait for database to be ready
        uses: iFaxity/wait-on-action@a7d13170ec542bdca4ef8ac4b15e9c6aa00a6866 # v1.2.1
        with:
          resource: http://localhost:7474
      - name: Load all languages into the intermediate container
        run: |
          cd ../graph-database-loader
          pip3 install -r requirements.txt
          pip3 install -e .
          python3 wilhelm_vocabulary/load_all_in_parallel.py
        env:
          NEO4J_URI: ${{ env.NEO4J_URI }}
          NEO4J_DATABASE: ${{ env.NEO4J_DATABASE }}
          NEO4J_USERNAME: ${{ env.NEO4J_USERNAME }}
          NEO4J_PASSWORD: ${{ env.NEO4J_PASSWORD }}
      - name: Install dependencies
        run: pip3 install -r requirements.txt
      - name: Run acceptance tests
        run: behave -v

  sync-to-huggingface-space:
    needs: acceptance-tests
    name: Sync with Hugging Face Datasets
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
          lfs: true
          persist-credentials: false
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install dependencies
        run: pip3 install -r requirements.txt
      - name: Install graph-json-generator in editable mode, making the package available on Python path, allowing imports from sibling package
        working-directory: graph-json-generator
        run: pip3 install -e .
      - name: Generate Graph Data
        working-directory: graph-json-generator/generator
        run: python3 ./generate_all_languages.py
      - name: Prepare Hugging Face Datasets
        working-directory: huggingface
        run: |
          cp ../graph-json-generator/*.json .
          for f in *.json; do
              mv -- "$f" "${f%.json}.jsonl"
          done
          ls
      - name: Push to hub
        if: github.ref == 'refs/heads/master'
        run: |
          git config --global user.name "QubitPi"
          git config --global user.email "jack20220723@gmail.com"

          git clone https://QubitPi:"$HF_TOKEN"@huggingface.co/datasets/QubitPi/Antiqua
          cd Antiqua
          rm -rf ./*
          mv ../huggingface/README.md .
          mv ../huggingface/*-graph-data.jsonl .

          git lfs install
          git lfs track "./*-graph-data.jsonl"
          git add .
          git add ./*-graph-data.jsonl

          if ! git diff --quiet --exit-code && ! git diff --cached --quiet --exit-code; then
            git commit -m "Update Hugging Face Datasets"
            git push -f
          else
            echo "Datasets up to date. Nothing is going to be pushed"
          fi
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}

  docker:
    name: Test Docker Build and Publish Data Image to DockerHub
    needs: acceptance-tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
          persist-credentials: false
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Startup a Neo4J database
        run: |
          docker run \
              --publish=7474:7474 \
              --publish=7687:7687 \
              --env=NEO4J_AUTH=none \
              --env=NEO4J_ACCEPT_LICENSE_AGREEMENT=yes \
              -e NEO4JLABS_PLUGINS=\[\"apoc\"\] \
              --name data-loader \
              neo4j:${{ env.NEO4J_ENTERPRISE_VERSION }} &
      - name: Wait for database to be ready
        uses: iFaxity/wait-on-action@a7d13170ec542bdca4ef8ac4b15e9c6aa00a6866 # v1.2.1
        with:
          resource: http://localhost:7474
      - name: Load all languages into the intermediate container
        run: |
          cd graph-database-loader
          pip3 install -r requirements.txt
          pip3 install -e .
          python3 wilhelm_vocabulary/load_all_in_parallel.py
        env:
          NEO4J_URI: ${{ env.NEO4J_URI }}
          NEO4J_DATABASE: ${{ env.NEO4J_DATABASE }}
          NEO4J_USERNAME: ${{ env.NEO4J_USERNAME }}
          NEO4J_PASSWORD: ${{ env.NEO4J_PASSWORD }}
      - name: Copy over data onto host
        run: docker cp data-loader:/data .
      - name: Test image build
        uses: docker/build-push-action@1dc73863535b631f98b2378be8619f83b136f4a0 # v6.17.0
        with:
          context: .
          push: false
      - name: Login to DockerHub
        if: github.ref == 'refs/heads/master'
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          username: jack20191124
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Push image to DockerHub
        if: github.ref == 'refs/heads/master'
        uses: docker/build-push-action@1dc73863535b631f98b2378be8619f83b136f4a0 # v6.17.0
        with:
          context: .
          push: true
          tags: jack20191124/antiqua:latest
      - name: Push image Description
        if: github.ref == 'refs/heads/master'
        uses: peter-evans/dockerhub-description@432a30c9e07499fd01da9f8a49f0faf9e0ca5b77 # v4.0.2
        with:
          username: jack20191124
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          repository: jack20191124/antiqua
          readme-filepath: README.md

  documentation:
    name: Graph Database Loader Documentation
    runs-on: ubuntu-latest
    needs: acceptance-tests
    permissions:
      contents: write
    defaults:
      run:
        working-directory: graph-database-loader/docs
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
        with:
          fetch-depth: 0
          persist-credentials: true
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install dependencies
        run: pip3 install -r source/requirements.txt
      - name: Build documentation
        run: make html
      - name: Deploy documentation to GitHub Pages
        if: github.ref == 'refs/heads/master'
        uses: peaceiris/actions-gh-pages@4f9cc6602d3f66b9c108549d475ec49e8ef4d45e # v4.0.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: graph-database-loader/docs/build/html/
          enable_jekyll: false
          user_name: QubitPi
          user_email: jack20220723@gmail.com
          cname: antiqua.qubitpi.org

  package:
    name: Test Package Build
    needs: acceptance-tests
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
        subproject: [ graph-json-generator, graph-database-loader ]
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: ${{ matrix.subproject }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Test dist build
        run: python setup.py sdist

  push-release-tag:
    name: Bump Version
    if: github.ref == 'refs/heads/master'
    needs: package
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683  # v4.2.2
        with:
          fetch-depth: 0
          persist-credentials: true
      - name: Tag for release
        run: |
          git config --global user.name QubitPi
          git config --global user.email jack20220723@gmail.com
          .github/version-bump/tag-for-release.bash

  release:
    name: Publish ${{ matrix.subproject }} To PyPI
    if: github.ref == 'refs/heads/master'
    needs: push-release-tag
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        subproject: [ graph-json-generator, graph-database-loader ]
    defaults:
      run:
        working-directory: ${{ matrix.subproject }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
          persist-credentials: true
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Bump version
        run: |
          git pull
          VERSION=$(git describe)
          echo "INFO Last tag: $VERSION"
          sed -i "s/    version=\"0.0.1\",/    version=\"$VERSION\",/" setup.py
      - name: Package up SDK
        run: python setup.py sdist
      - name: Publish a Python distribution to PyPI
        uses: pypa/gh-action-pypi-publish@76f52bc884231f62b9a034ebfe128415bbaabdfc # v1.12.4
        with:
          packages-dir: ${{ matrix.subproject }}/dist

  cleanup-neo4j:
    name: Prepare Prod Database Loading
    needs: acceptance-tests
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: graph-database-loader
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
          persist-credentials: false
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Cleanup Neo4J prod DB
        run: |
          pip3 install -e .
          python3 wilhelm_vocabulary/cleanup_neo4j.py
        env:
          NEO4J_URI: ${{ secrets.NEO4J_URI }}
          NEO4J_DATABASE: ${{ secrets.NEO4J_DATABASE }}
          NEO4J_USERNAME: ${{ secrets.NEO4J_USERNAME }}
          NEO4J_PASSWORD: ${{ secrets.NEO4J_PASSWORD }}

  load-vocabulary:
    name: Load ${{ matrix.language.name }} vocabularies
    defaults:
      run:
        working-directory: graph-database-loader
    needs: cleanup-neo4j
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        language: [
          {
            name: German,
            load-script: wilhelm_vocabulary/load_german.py
          },
          {
            name: Ancient Greek,
            load-script: wilhelm_vocabulary/load_ancient_greek.py
          },
          {
            name: Latin,
            load-script: wilhelm_vocabulary/load_latin.py
          }
        ]
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          fetch-depth: 0
          persist-credentials: false
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Load ${{ matrix.language.name }}
        run: |
          pip3 install -e .
          python3 ${{ matrix.language.load-script }}
        env:
          NEO4J_URI: ${{ secrets.NEO4J_URI }}
          NEO4J_DATABASE: ${{ secrets.NEO4J_DATABASE }}
          NEO4J_USERNAME: ${{ secrets.NEO4J_USERNAME }}
          NEO4J_PASSWORD: ${{ secrets.NEO4J_PASSWORD }}
